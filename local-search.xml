<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GPG公钥生成问题-解决(Linux)</title>
    <link href="/2023/03/17/GPG%E5%85%AC%E9%92%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/03/17/GPG%E5%85%AC%E9%92%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天要用到GPG公钥，在码云上，于是按照官方的步骤去操作，软件我下载安装好了，就是不好使，遇到的问题挺多。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>下载地址：<a href="https://gpg4win.org/">Gpg4win</a></p><p><img src="http://liyansheng.top/typora/image-20230317005007100.png" alt="image-20230317005007100">这个工具安装，打开后提示报错</p><p>如下：</p><p><img src="http://liyansheng.top/typora/image-20230317005100081.png" alt="image-20230317005100081"></p><p>点OK后</p><p><img src="http://liyansheng.top/typora/image-20230317005129974.png" alt="image-20230317005129974"></p><p>于是我找了网上的一些解决方案，还是不行</p><p>我也尝试在不同的硬盘上重装了几次，还是不行</p><blockquote><p>换种方式，既然在<strong>win</strong>上不好使，那就上<strong>Linux</strong>上试试</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>在 Linux 终端中安装 GnuPG 工具。可以运行以下命令：</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum install gnupg <br></code></pre></td></tr></table></figure></li><li><p>打开终端并运行以下命令，生成密钥对：</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">gpg <span class="hljs-comment">--gen-key</span><br></code></pre></td></tr></table></figure></li><li><p>根据提示，选择要使用的加密算法和密钥长度。选择默认选项即可。</p></li><li><p>输入你的用户名、电子邮件地址和密码。这些信息将与你的密钥关联，并最终生成公钥和私钥。</p></li><li><p>在生成过程中，系统会提示你随机移动鼠标或者其他的随机操作，以增加生成密钥的随机性和安全性。</p></li><li><p>GPG 工具将生成公钥和私钥。可以使用以下命令查看你的公钥：</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">gpg <span class="hljs-comment">--list-keys</span><br></code></pre></td></tr></table></figure></li><li><p>导出公钥，以便在其他设备上使用：</p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gpg <span class="hljs-attr">--armor</span> <span class="hljs-attr">--export</span> your-email-<span class="hljs-selector-tag">address</span> &gt; publickey.asc<br></code></pre></td></tr></table></figure><p> 将 <code>your-email-address</code> 替换为你在生成密钥时使用的电子邮件地址。</p><p> 这会将公钥导出为 ASCII 格式，并将其保存在名为 <code>publickey.asc</code> 的文件中。</p></li><li><p>复制并粘贴 ASCII 格式的公钥到需要使用的地方，比如代码托管网站、电子邮件签名等。</p></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>将上述的publickey.asc里面的全部内容粘贴到下方的公钥框，点确定即可成功添加！</p><p><img src="http://liyansheng.top/typora/image-20230317010046157.png" alt="image-20230317010046157"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次使用Hexo</title>
    <link href="/2023/03/16/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo/"/>
    <url>/2023/03/16/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo/</url>
    
    <content type="html"><![CDATA[<h3 id="你好啊"><a href="#你好啊" class="headerlink" title="你好啊"></a>你好啊</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Springboot整合Kafka步骤</title>
    <link href="/2023/03/16/SpringBoot%E6%95%B4%E5%90%88kafka/"/>
    <url>/2023/03/16/SpringBoot%E6%95%B4%E5%90%88kafka/</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单整理下Springboot整合Kafka的步骤，并实现简单的案例</p></blockquote><p>1、创建Springboot项目</p><p>直接模板创建，或者先创建maven项目，然后改造成Springboot项目，这里不再演示这个</p><p>2、引入依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、填写配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.154</span><span class="hljs-number">.134</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">auto-commit-interval:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>4、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lys;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@ContextConfiguration(classes = DiyApplication.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaProducer kafkaProducer;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testKafka</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 参数1：主题，参数2：信息</span><br>        kafkaProducer.sendMessage(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;你好&quot;</span>);<br>        kafkaProducer.sendMessage(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;在么&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaProducer</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate kafkaTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String topic,String content)</span>&#123;<br>        kafkaTemplate.send(topic,content);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaConsumer</span>&#123;<br>    <span class="hljs-comment">// 当收到信息，自动执行这个方法</span><br>    <span class="hljs-meta">@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(ConsumerRecord record)</span>&#123;<br>        System.out.println(record.value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、结果</p><p><img src="http://liyansheng.top/typora/image-20230226184626286.png" alt="image-20230226184626286"></p><p>可能出现的问题连上服务器：<a href="https://www.cnblogs.com/qianxiaoPro/p/15788854.html">Kafka client 客户端远程连接 一直报网络错误问题 - 浅笑19 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/16/hello-world/"/>
    <url>/2023/03/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
